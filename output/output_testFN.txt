List facts:
['zero(0)', 'size(AB, 3)', 'size(BC, 4)', 'size(AC, 5)', 'size(AD, 4)', 'size(CD, 3)', 'size(BE, 3)', 'size(CE, 3)', 'size(AF, 2)', 'size(BF, 1)', 'is(?X, ?X)', 'checks_out(1)', 'checks_out(2)', 'checks_out(3)']

List rules:
['(V ~size(get[?T,0], ?LA) ~size(get[?T,1], ?LB) ~size(get[?T,2], ?LC) ~checks_out(compute_triangle[?LA,?LB,?LC]) triangle(?T))', '(V ~size(get[?T,0], ?LA) ~size(get[?T,1], ?LB) ~size(get[?T,2], ?LC) ~is(getShortest[?LA,?LB,?LC], ?LS) ~is(getMiddle[?LA,?LB,?LC], ?LM) ~is(getLongest[?LA,?LB,?LC], ?LL) ~zero(compute_pitagoras[?LS,?LM,?LL]) dreptunghic(?T))']

List queries:
['triangle(ABC)', 'triangle(BCE)', 'triangle(ACD)', 'triangle(ABF)', 'triangle(ABD)', 'triangle(ABE)', 'dreptunghic(ABC)', 'dreptunghic(ACD)', 'dreptunghic(BCE)', 'dreptunghic(ABF)']


Scopuri de demonstrat: triangle(ABC)
  Incercam triangle(ABC): size(get[ABC,0], ?LA), size(get[ABC,1], ?LB), size(get[ABC,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC]) % 1.0
  get[ABC,0] => AB
  Scopuri de demonstrat: size(AB, ?LA), size(get[ABC,1], ?LB), size(get[ABC,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC])
    size(AB, 3) % 1.0 este un fapt
    get[ABC,1] => BC
    Scopuri de demonstrat: size(BC, ?LB), size(get[ABC,2], ?LC), checks_out(compute_triangle[3,?LB,?LC])
      size(BC, 4) % 1.0 este un fapt
      get[ABC,2] => AC
      Scopuri de demonstrat: size(AC, ?LC), checks_out(compute_triangle[3,4,?LC])
        size(AC, 5) % 1.0 este un fapt
        compute_triangle[3,4,5] => 2
        Scopuri de demonstrat: checks_out(2)
          checks_out(2) % 1.0 este un fapt
          Solutie: ?LA: 3, ?LB: 4, ?LC: 5 % 1.0
Gata.
**The theorem triangle(ABC) is TRUE! % 1.0
{} % 1.0

Scopuri de demonstrat: triangle(BCE)
  Incercam triangle(BCE): size(get[BCE,0], ?LA), size(get[BCE,1], ?LB), size(get[BCE,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC]) % 1.0
  get[BCE,0] => BC
  Scopuri de demonstrat: size(BC, ?LA), size(get[BCE,1], ?LB), size(get[BCE,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC])
    size(BC, 4) % 1.0 este un fapt
    get[BCE,1] => CE
    Scopuri de demonstrat: size(CE, ?LB), size(get[BCE,2], ?LC), checks_out(compute_triangle[4,?LB,?LC])
      size(CE, 3) % 1.0 este un fapt
      get[BCE,2] => BE
      Scopuri de demonstrat: size(BE, ?LC), checks_out(compute_triangle[4,3,?LC])
        size(BE, 3) % 1.0 este un fapt
        compute_triangle[4,3,3] => 2
        Scopuri de demonstrat: checks_out(2)
          checks_out(2) % 1.0 este un fapt
          Solutie: ?LA: 4, ?LB: 3, ?LC: 3 % 1.0
Gata.
**The theorem triangle(BCE) is TRUE! % 1.0
{} % 1.0

Scopuri de demonstrat: triangle(ACD)
  Incercam triangle(ACD): size(get[ACD,0], ?LA), size(get[ACD,1], ?LB), size(get[ACD,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC]) % 1.0
  get[ACD,0] => AC
  Scopuri de demonstrat: size(AC, ?LA), size(get[ACD,1], ?LB), size(get[ACD,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC])
    size(AC, 5) % 1.0 este un fapt
    get[ACD,1] => CD
    Scopuri de demonstrat: size(CD, ?LB), size(get[ACD,2], ?LC), checks_out(compute_triangle[5,?LB,?LC])
      size(CD, 3) % 1.0 este un fapt
      get[ACD,2] => AD
      Scopuri de demonstrat: size(AD, ?LC), checks_out(compute_triangle[5,3,?LC])
        size(AD, 4) % 1.0 este un fapt
        compute_triangle[5,3,4] => 2
        Scopuri de demonstrat: checks_out(2)
          checks_out(2) % 1.0 este un fapt
          Solutie: ?LA: 5, ?LB: 3, ?LC: 4 % 1.0
Gata.
**The theorem triangle(ACD) is TRUE! % 1.0
{} % 1.0

Scopuri de demonstrat: triangle(ABF)
  Incercam triangle(ABF): size(get[ABF,0], ?LA), size(get[ABF,1], ?LB), size(get[ABF,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC]) % 1.0
  get[ABF,0] => AB
  Scopuri de demonstrat: size(AB, ?LA), size(get[ABF,1], ?LB), size(get[ABF,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC])
    size(AB, 3) % 1.0 este un fapt
    get[ABF,1] => BF
    Scopuri de demonstrat: size(BF, ?LB), size(get[ABF,2], ?LC), checks_out(compute_triangle[3,?LB,?LC])
      size(BF, 1) % 1.0 este un fapt
      get[ABF,2] => AF
      Scopuri de demonstrat: size(AF, ?LC), checks_out(compute_triangle[3,1,?LC])
        size(AF, 2) % 1.0 este un fapt
        compute_triangle[3,1,2] => 0
        Scopuri de demonstrat: checks_out(0)
          The theorem checks_out(0) is FALSE!
Gata.
**The theorem triangle(ABF) is FALSE!

Scopuri de demonstrat: triangle(ABD)
  Incercam triangle(ABD): size(get[ABD,0], ?LA), size(get[ABD,1], ?LB), size(get[ABD,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC]) % 1.0
  get[ABD,0] => AB
  Scopuri de demonstrat: size(AB, ?LA), size(get[ABD,1], ?LB), size(get[ABD,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC])
    size(AB, 3) % 1.0 este un fapt
    get[ABD,1] => BD
    Scopuri de demonstrat: size(BD, ?LB), size(get[ABD,2], ?LC), checks_out(compute_triangle[3,?LB,?LC])
      The theorem size(BD, ?LB) is FALSE!
Gata.
**The theorem triangle(ABD) is FALSE!

Scopuri de demonstrat: triangle(ABE)
  Incercam triangle(ABE): size(get[ABE,0], ?LA), size(get[ABE,1], ?LB), size(get[ABE,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC]) % 1.0
  get[ABE,0] => AB
  Scopuri de demonstrat: size(AB, ?LA), size(get[ABE,1], ?LB), size(get[ABE,2], ?LC), checks_out(compute_triangle[?LA,?LB,?LC])
    size(AB, 3) % 1.0 este un fapt
    get[ABE,1] => BE
    Scopuri de demonstrat: size(BE, ?LB), size(get[ABE,2], ?LC), checks_out(compute_triangle[3,?LB,?LC])
      size(BE, 3) % 1.0 este un fapt
      get[ABE,2] => AE
      Scopuri de demonstrat: size(AE, ?LC), checks_out(compute_triangle[3,3,?LC])
        The theorem size(AE, ?LC) is FALSE!
Gata.
**The theorem triangle(ABE) is FALSE!

Scopuri de demonstrat: dreptunghic(ABC)
  Incercam dreptunghic(ABC): size(get[ABC,0], ?LA), size(get[ABC,1], ?LB), size(get[ABC,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL]) % 1.0
  get[ABC,0] => AB
  Scopuri de demonstrat: size(AB, ?LA), size(get[ABC,1], ?LB), size(get[ABC,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
    size(AB, 3) % 1.0 este un fapt
    get[ABC,1] => BC
    Scopuri de demonstrat: size(BC, ?LB), size(get[ABC,2], ?LC), is(getShortest[3,?LB,?LC], ?LS), is(getMiddle[3,?LB,?LC], ?LM), is(getLongest[3,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
      size(BC, 4) % 1.0 este un fapt
      get[ABC,2] => AC
      Scopuri de demonstrat: size(AC, ?LC), is(getShortest[3,4,?LC], ?LS), is(getMiddle[3,4,?LC], ?LM), is(getLongest[3,4,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
        size(AC, 5) % 1.0 este un fapt
        getShortest[3,4,5] => 3
        Scopuri de demonstrat: is(3, ?LS), is(getMiddle[3,4,5], ?LM), is(getLongest[3,4,5], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
          is(3, 3) % 1.0 este un fapt
          getMiddle[3,4,5] => 4
          Scopuri de demonstrat: is(4, ?LM), is(getLongest[3,4,5], ?LL), zero(compute_pitagoras[3,?LM,?LL])
            is(4, 4) % 1.0 este un fapt
            getLongest[3,4,5] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
            is(4, 4) % 1.0 este un fapt
            getLongest[3,4,5] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
          is(3, 3) % 1.0 este un fapt
          getMiddle[3,4,5] => 4
          Scopuri de demonstrat: is(4, ?LM), is(getLongest[3,4,5], ?LL), zero(compute_pitagoras[3,?LM,?LL])
            is(4, 4) % 1.0 este un fapt
            getLongest[3,4,5] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
            is(4, 4) % 1.0 este un fapt
            getLongest[3,4,5] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 3, ?LB: 4, ?LC: 5, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
Gata.
**The theorem dreptunghic(ABC) is TRUE! % 1.0
{} % 1.0

Scopuri de demonstrat: dreptunghic(ACD)
  Incercam dreptunghic(ACD): size(get[ACD,0], ?LA), size(get[ACD,1], ?LB), size(get[ACD,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL]) % 1.0
  get[ACD,0] => AC
  Scopuri de demonstrat: size(AC, ?LA), size(get[ACD,1], ?LB), size(get[ACD,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
    size(AC, 5) % 1.0 este un fapt
    get[ACD,1] => CD
    Scopuri de demonstrat: size(CD, ?LB), size(get[ACD,2], ?LC), is(getShortest[5,?LB,?LC], ?LS), is(getMiddle[5,?LB,?LC], ?LM), is(getLongest[5,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
      size(CD, 3) % 1.0 este un fapt
      get[ACD,2] => AD
      Scopuri de demonstrat: size(AD, ?LC), is(getShortest[5,3,?LC], ?LS), is(getMiddle[5,3,?LC], ?LM), is(getLongest[5,3,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
        size(AD, 4) % 1.0 este un fapt
        getShortest[5,3,4] => 3
        Scopuri de demonstrat: is(3, ?LS), is(getMiddle[5,3,4], ?LM), is(getLongest[5,3,4], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
          is(3, 3) % 1.0 este un fapt
          getMiddle[5,3,4] => 4
          Scopuri de demonstrat: is(4, ?LM), is(getLongest[5,3,4], ?LL), zero(compute_pitagoras[3,?LM,?LL])
            is(4, 4) % 1.0 este un fapt
            getLongest[5,3,4] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
            is(4, 4) % 1.0 este un fapt
            getLongest[5,3,4] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
          is(3, 3) % 1.0 este un fapt
          getMiddle[5,3,4] => 4
          Scopuri de demonstrat: is(4, ?LM), is(getLongest[5,3,4], ?LL), zero(compute_pitagoras[3,?LM,?LL])
            is(4, 4) % 1.0 este un fapt
            getLongest[5,3,4] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
            is(4, 4) % 1.0 este un fapt
            getLongest[5,3,4] => 5
            Scopuri de demonstrat: is(5, ?LL), zero(compute_pitagoras[3,4,?LL])
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
              is(5, 5) % 1.0 este un fapt
              compute_pitagoras[3,4,5] => 0
              Scopuri de demonstrat: zero(0)
                zero(0) % 1.0 este un fapt
                Solutie: ?LA: 5, ?LB: 3, ?LC: 4, ?LL: 5, ?LM: 4, ?LS: 3 % 1.0
Gata.
**The theorem dreptunghic(ACD) is TRUE! % 1.0
{} % 1.0

Scopuri de demonstrat: dreptunghic(BCE)
  Incercam dreptunghic(BCE): size(get[BCE,0], ?LA), size(get[BCE,1], ?LB), size(get[BCE,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL]) % 1.0
  get[BCE,0] => BC
  Scopuri de demonstrat: size(BC, ?LA), size(get[BCE,1], ?LB), size(get[BCE,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
    size(BC, 4) % 1.0 este un fapt
    get[BCE,1] => CE
    Scopuri de demonstrat: size(CE, ?LB), size(get[BCE,2], ?LC), is(getShortest[4,?LB,?LC], ?LS), is(getMiddle[4,?LB,?LC], ?LM), is(getLongest[4,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
      size(CE, 3) % 1.0 este un fapt
      get[BCE,2] => BE
      Scopuri de demonstrat: size(BE, ?LC), is(getShortest[4,3,?LC], ?LS), is(getMiddle[4,3,?LC], ?LM), is(getLongest[4,3,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
        size(BE, 3) % 1.0 este un fapt
        getShortest[4,3,3] => 3
        Scopuri de demonstrat: is(3, ?LS), is(getMiddle[4,3,3], ?LM), is(getLongest[4,3,3], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
          is(3, 3) % 1.0 este un fapt
          getMiddle[4,3,3] => 3
          Scopuri de demonstrat: is(3, ?LM), is(getLongest[4,3,3], ?LL), zero(compute_pitagoras[3,?LM,?LL])
            is(3, 3) % 1.0 este un fapt
            getLongest[4,3,3] => 4
            Scopuri de demonstrat: is(4, ?LL), zero(compute_pitagoras[3,3,?LL])
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
            is(3, 3) % 1.0 este un fapt
            getLongest[4,3,3] => 4
            Scopuri de demonstrat: is(4, ?LL), zero(compute_pitagoras[3,3,?LL])
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
          is(3, 3) % 1.0 este un fapt
          getMiddle[4,3,3] => 3
          Scopuri de demonstrat: is(3, ?LM), is(getLongest[4,3,3], ?LL), zero(compute_pitagoras[3,?LM,?LL])
            is(3, 3) % 1.0 este un fapt
            getLongest[4,3,3] => 4
            Scopuri de demonstrat: is(4, ?LL), zero(compute_pitagoras[3,3,?LL])
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
            is(3, 3) % 1.0 este un fapt
            getLongest[4,3,3] => 4
            Scopuri de demonstrat: is(4, ?LL), zero(compute_pitagoras[3,3,?LL])
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
              is(4, 4) % 1.0 este un fapt
              compute_pitagoras[3,3,4] => 2
              Scopuri de demonstrat: zero(2)
                The theorem zero(2) is FALSE!
Gata.
**The theorem dreptunghic(BCE) is FALSE!

Scopuri de demonstrat: dreptunghic(ABF)
  Incercam dreptunghic(ABF): size(get[ABF,0], ?LA), size(get[ABF,1], ?LB), size(get[ABF,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL]) % 1.0
  get[ABF,0] => AB
  Scopuri de demonstrat: size(AB, ?LA), size(get[ABF,1], ?LB), size(get[ABF,2], ?LC), is(getShortest[?LA,?LB,?LC], ?LS), is(getMiddle[?LA,?LB,?LC], ?LM), is(getLongest[?LA,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
    size(AB, 3) % 1.0 este un fapt
    get[ABF,1] => BF
    Scopuri de demonstrat: size(BF, ?LB), size(get[ABF,2], ?LC), is(getShortest[3,?LB,?LC], ?LS), is(getMiddle[3,?LB,?LC], ?LM), is(getLongest[3,?LB,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
      size(BF, 1) % 1.0 este un fapt
      get[ABF,2] => AF
      Scopuri de demonstrat: size(AF, ?LC), is(getShortest[3,1,?LC], ?LS), is(getMiddle[3,1,?LC], ?LM), is(getLongest[3,1,?LC], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
        size(AF, 2) % 1.0 este un fapt
        getShortest[3,1,2] => 1
        Scopuri de demonstrat: is(1, ?LS), is(getMiddle[3,1,2], ?LM), is(getLongest[3,1,2], ?LL), zero(compute_pitagoras[?LS,?LM,?LL])
          is(1, 1) % 1.0 este un fapt
          getMiddle[3,1,2] => 2
          Scopuri de demonstrat: is(2, ?LM), is(getLongest[3,1,2], ?LL), zero(compute_pitagoras[1,?LM,?LL])
            is(2, 2) % 1.0 este un fapt
            getLongest[3,1,2] => 3
            Scopuri de demonstrat: is(3, ?LL), zero(compute_pitagoras[1,2,?LL])
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
            is(2, 2) % 1.0 este un fapt
            getLongest[3,1,2] => 3
            Scopuri de demonstrat: is(3, ?LL), zero(compute_pitagoras[1,2,?LL])
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
          is(1, 1) % 1.0 este un fapt
          getMiddle[3,1,2] => 2
          Scopuri de demonstrat: is(2, ?LM), is(getLongest[3,1,2], ?LL), zero(compute_pitagoras[1,?LM,?LL])
            is(2, 2) % 1.0 este un fapt
            getLongest[3,1,2] => 3
            Scopuri de demonstrat: is(3, ?LL), zero(compute_pitagoras[1,2,?LL])
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
            is(2, 2) % 1.0 este un fapt
            getLongest[3,1,2] => 3
            Scopuri de demonstrat: is(3, ?LL), zero(compute_pitagoras[1,2,?LL])
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
              is(3, 3) % 1.0 este un fapt
              compute_pitagoras[1,2,3] => -4
              Scopuri de demonstrat: zero(-4)
                The theorem zero(-4) is FALSE!
Gata.
**The theorem dreptunghic(ABF) is FALSE!

